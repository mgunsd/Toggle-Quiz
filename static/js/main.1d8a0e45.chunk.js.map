{"version":3,"sources":["store/quizData.ts","store/quizSlice.ts","store/index.ts","components/common/Card/Card.tsx","components/common/Toggle/Toggle.tsx","components/ToggleQuiz/ToggleQuiz.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["quizData","toptext","subtext","true","false","options","initialState","quiz","status","quizSlice","createSlice","name","reducers","setQuiz","state","action","payload","setStatus","actions","selectedQuiz","store","configureStore","reducer","quizReducer","useAppSelector","useSelector","Card","children","className","Toggle","choices","onToggle","locked","useState","Math","round","random","index","setIndex","onClick","style","transform","ToggleQuiz","answers","setAnswers","dispatch","useDispatch","map","option","i","a","ans","count","filter","length","countCorrect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8a0e45.chunk.js","sourcesContent":["export const quizData = [\n  {\n    toptext: 'An animal cell contains: ',\n    subtext: {\n      true: 'The answer is correct',\n      false: 'The answer is incorrect',\n    },\n    options: [\n      [['Cellulose', 'Mitochondria'], 1],\n      [['Cell Wall', 'Ribosomes'], 1],\n      [['Chloroplats', 'Cytoplasm'], 1],\n      [['Partially permeable membrane', 'impermeable membrane'], 0],\n    ],\n  },\n  {\n    toptext: 'Choose the best option',\n    subtext: {\n      true: 'Well done',\n      false: 'Not Quite !',\n    },\n    options: [\n      [['React', 'Angular'], 0],\n      [['JavaScript', 'Typescript'], 1],\n      [['Context', 'Redux'], 1],\n    ],\n  },\n];\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from './index';\nimport { quizData } from './quizData';\n\nexport interface QuizState {\n  quiz: Quiz;\n  status: 'correct' | 'almost' | 'false' | 'idle';\n}\n\nconst initialState: QuizState = {\n  quiz: quizData[0],\n  status: 'idle',\n};\n\nexport const quizSlice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    setQuiz: (state, action: PayloadAction<number>) => {\n      state.quiz = quizData[action.payload];\n    },\n    setStatus: (\n      state,\n      action: PayloadAction<'correct' | 'almost' | 'false' | 'idle'>\n    ) => {\n      state.status = action.payload;\n    },\n  },\n});\n\nexport const { setQuiz, setStatus } = quizSlice.actions;\n\nexport const selectedQuiz = (state: RootState) => state.quiz;\n\nexport default quizSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport quizReducer from './quizSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Card.scss';\n\ninterface CardProps {\n  children: React.ReactNode;\n  status: 'correct' | 'almost' | 'false' | 'idle';\n}\n\nexport const Card: React.FC<CardProps> = ({ children, status }) => {\n  return <div className={`card-${status}`}>{children}</div>;\n};\n","import React, { useState } from 'react';\nimport './Toggle.scss';\n\ninterface ToggleProps {\n  onToggle: Function;\n  locked: Boolean;\n  choices: [string[], number];\n}\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  choices,\n  onToggle,\n  locked,\n}) => {\n  const [index, setIndex] = useState(Math.round(Math.random()));\n\n  return (\n    <div\n      className=\"toggle\"\n      onClick={\n        !locked\n          ? () => {\n              setIndex(index === 0 ? 1 : 0);\n              onToggle(index !== choices[1]);\n            }\n          : () => {}\n      }\n    >\n      <div className=\"text\">{choices[0][0]}</div>\n      <div className=\"text\">{choices[0][1]}</div>\n      <div\n        className=\"slider\"\n        style={{\n          transform: index === 0 ? 'translateX(0%)' : 'translateX(100%)',\n        }}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../store';\nimport { selectedQuiz, setStatus } from '../../store/quizSlice';\nimport { Card, Toggle } from '../common';\nimport './ToggleQuiz.scss';\n\ninterface ToggleQuizProps {}\n\nexport const ToggleQuiz: React.FC<ToggleQuizProps> = () => {\n  const [answers, setAnswers] = useState([0]);\n  const { quiz, status } = useAppSelector(selectedQuiz);\n  const dispatch = useAppDispatch();\n\n  const countCorrect = (i: number, a: boolean) => {\n    let ans = [...answers];\n    ans[i] = a ? 1 : 0;\n    setAnswers(ans);\n\n    const count = ans.filter((a) => a === 1).length;\n\n    if (count === quiz.options.length) {\n      dispatch(setStatus('correct'));\n    } else if (count === quiz.options.length - 1) {\n      dispatch(setStatus('almost'));\n    } else {\n      dispatch(setStatus('false'));\n    }\n  };\n\n  return (\n    <Card status={status}>\n      <div className=\"statement\">{quiz.toptext}</div>\n      {quiz.options.map((option: [string[], number], i: number) => {\n        return (\n          <Toggle\n            key={i}\n            choices={option}\n            locked={status === 'correct'}\n            onToggle={(a: boolean) => countCorrect(i, a)}\n          />\n        );\n      })}\n      <div className=\"text\">\n        {status === 'correct' ? quiz.subtext.true : quiz.subtext.false}\n      </div>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { ToggleQuiz } from './components/ToggleQuiz/ToggleQuiz';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ToggleQuiz />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}